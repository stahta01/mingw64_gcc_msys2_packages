# Maintainer:  Tim Stahlhut <stahta01@gmail.com>

####
# Should be valid configure options for gcc folder
# --with-local-prefix
# --enable-checking
# --disable-multilib
# --disable-win32-registry
# --with-system-zlib
# --with-gnu-as
# --with-dwarf2
# --disable-sjlj-exceptions
# --disable-threads
# --enable-languages
# --with-pkgversion
# --with-bugurl

# Should be valid configure options for libstdc++-v3 folder
# --enable-fully-dynamic-string
# --disable-libstdcxx-debug
# --disable-libstdcxx-pch
# --disable-symvers

# Should be valid configure options for multiple folders
# --disable-nls
# --disable-werror
# --with-libiconv-prefix
# --enable-bootstrap

_build_using_external_compiler=no   # Use no for production

_enable_ada=yes                     # Use yes for production

_enable_bootstrap=no               # Use yes for production; GMP fails to build
# set _enable_backstrap_ada to yes when building Ada GCC using a newer
#   version of GCC
_enable_backstrap_ada=no            # Use no for production
#
# =========================================== #
# The code in this section should not normally be changed
#
if [[ "$_build_using_external_compiler" == "yes" && "$_enable_bootstrap" == "yes" ]]; then
  _enable_bootstrap=no
fi

if [[ "$_build_using_external_compiler" == "yes" && "$_enable_ada" == "yes" && \
      "$_enable_backstrap_ada" == "no" ]]; then
  _enable_backstrap_ada=yes
fi

if [[ "$_enable_bootstrap" != "yes" && "$MSYSTEM" == "UCRT64" ]]; then
  # UCRT64 requires bootstrap to build
  _enable_bootstrap=yes
fi

# Common toolchain settings
OPT_MINGW_PREFIX=/opt${MINGW_PREFIX}
if [[ "$MSYSTEM" == "UCRT64" ]]; then
  OPT_MINGW_PACKAGE_PREFIX=opt-ucrt-${MSYSTEM_CARCH}
else
  OPT_MINGW_PACKAGE_PREFIX=opt-mingw-${MSYSTEM_CARCH}
fi
_include_sub_folder=/${MINGW_CHOST}
#
# End of code not normally be changed
# =========================================== #
#
_realname=gcc
_sourcedir=${_realname}-git
_base_ver=4.3
pkgbase=opt-mingw-${_realname}${_base_ver}
pkgname=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-git")
pkgver=4.3.6+d20110627.r39.c8.g6503c21eb909
pkgrel=1
pkgdesc="GCC for the MinGW-w64"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64')
options=('staticlibs' '!emptydirs' '!strip' '!debug')
url="https://gcc.gnu.org"
license=('GPL' 'LGPL' 'FDL' 'custom')
groups=("${OPT_MINGW_PACKAGE_PREFIX}-toolchain")
makedepends=( 'bison' 'flex' 'texinfo'
  $([[ "$_build_using_external_compiler" != "yes" ]] && echo "${OPT_MINGW_PACKAGE_PREFIX}-${_realname}")
  $([[ "$_enable_ada" == "yes" && \
       "$_build_using_external_compiler" != "yes" ]] && echo "${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-ada")
  "${OPT_MINGW_PACKAGE_PREFIX}-crt"
  "${OPT_MINGW_PACKAGE_PREFIX}-headers"
  "${OPT_MINGW_PACKAGE_PREFIX}-libiconv"
  "${OPT_MINGW_PACKAGE_PREFIX}-zlib"
  "${OPT_MINGW_PACKAGE_PREFIX}-windows-default-manifest"
)
#checkdepends=('dejagnu')
optdepends=()

MPFR_VERSION=2.4.2
GMP_VERSION=4.3.2
noextract=("mpfr-${MPFR_VERSION}.tar.bz2"
           "gmp-${GMP_VERSION}.tar.bz2")
source=(ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-${MPFR_VERSION}.tar.bz2
        ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-${GMP_VERSION}.tar.bz2
        'conftest.adb'
        '111-gcc-4.0-fix-for-windows-not-minding-non-existant-parent-dirs.patch'
        '122-gcc-4.9-Relocate-libintl.patch'
        '131-gcc-4.0-windows-lrealpath-no-force-lowercase-nor-backslash.patch'
        '132-gcc-4.3-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch'
        '201-gcc-4.3-ada-Fix-wrong-case.patch'
        '202-gcc-4.3-ada-Add-space-between-and-return.patch'
        '704-gcc-4.3-Fix-texi-docs-syntax-errors.patch'
        '705-gcc-4.3-texi2pod.pl-Escape-braces-in-regexp-involving-strong.patch'
        '906-Ada-build-fix-for-GCC-4.4-and-4.3-building-GCC-4.3.patch'
        ${_sourcedir}::"git+https://github.com/gcc-mirror/gcc.git#branch=releases/gcc-${_base_ver}")
sha256sums=('c7e75a08a8d49d2082e4caee1591a05d11b9d5627514e678f02d66a124bcf2ba'
            '936162c0312886c21581002b79932829aa048cfaf9937c6265aeaa14f1cd1775'
            '7270a08586d76b73d251d530f740a29a8bcc1ae11bf28a0fa35e811c9f39f2c1'
            'cba7c512a4e0e6a738e0f4ad1026930260a73c7b39bedf36df0b16bae312206b'
            'd143713dfcb86afa0c32e53b12c1d3a9586729b6580c8e535d72e03003511914'
            '7cd7f884b7d2f64846adfb06007e881834fd00e98f78c737b965a823ce6198b0'
            'd122ee00238f2cef746639cc5d8807dffd7d4f06a33e1bb146fa1b28a7dae14a'
            '50d3723b3c8e0e75dc9cbe5306737df21ef90a5d25d509757684e279189bec06'
            'd1017c3118033c5e256a7bc95feb5ecf5192daa43dba1909452f782f377fe95d'
            '5f3a2cf3c32abe305f870ddd50ed475f4d4aa2c112e60ae7c22ca5c247603cb7'
            '1afb2022fb8a6390b26c24603007c8cf29435bc2c68a576898a2f45c3207cfee'
            '02aeb9ea7e022228d5e85be25f18ab798b73fb9e636d39e5a468c2f8e6b047bc'
            'SKIP')
# =========================================== #
# Helper macros to help make tasks easier     #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    if patch --dry-run -Rbp1 -i "${srcdir}/${_patch}" > /dev/null 2>&1 ; then
      msg2 "Skipping ${_patch} because it likely was already applied"
    else
      msg2 "Applying ${_patch}"
      patch -Nbp1 -i "${srcdir}/${_patch}"
    fi
  done
}
del_file_exists() {
  for _fname in "$@"
  do
    if [ -f ${_fname} ]; then
      rm -rf ${_fname}
    fi
  done
}
_extract_to_gcc_folder() {
    local tarfile="$1"
    local subfolder="$(echo "$tarfile" | sed 's/-.*$//')"
    if [ ! -d  "$_sourcedir/$subfolder" ]; then
        echo "Extracting ${tarfile} to $_sourcedir/$subfolder"
        mkdir -p "$_sourcedir/$subfolder"
        tar -x --strip-components=1 -f "$tarfile" -C "$_sourcedir/$subfolder"
    else
        echo "Folder $_sourcedir/$subfolder already exists"
    fi
}
# =========================================== #
_git_base_commit=

pkgver() {
  cd ${srcdir}/${_sourcedir}
  _gcc_version=$(head -n 34 gcc/BASE-VER | sed -e 's/.* //' | tr -d '"\n')
  _gcc_date=$(head -n 34 gcc/DATESTAMP | sed -e 's/.* //' | tr -d '"\n')
  printf "%s+d%s.r%s.c%s.g%s" "$_gcc_version" "$_gcc_date" \
    $(git rev-list --count $(git log -1 --format=%H -- gcc/DATESTAMP)..${_git_base_commit}) \
    $(git rev-list --count ${_git_base_commit}..HEAD) \
    $(git rev-parse --short=12 ${_git_base_commit})
}

prepare() {
  cd ${srcdir}

  _extract_to_gcc_folder            mpfr-${MPFR_VERSION}.tar.bz2
  _extract_to_gcc_folder            gmp-${GMP_VERSION}.tar.bz2

  cd ${srcdir}/${_sourcedir}

  del_file_exists intl/canonicalize.c intl/canonicalize.h \
    intl/relocatex.c intl/relocatex.h

  _git_base_commit=$(git rev-parse HEAD)
  GIT_AM="git am --committer-date-is-author-date"

  git am --abort || true

  if [[ "$_build_using_external_compiler" != "yes" ]]; then
    ${GIT_AM} ${srcdir}/111-gcc-4.0-fix-for-windows-not-minding-non-existant-parent-dirs.patch
  fi
  ${GIT_AM} ${srcdir}/122-gcc-4.9-Relocate-libintl.patch
  ${GIT_AM} ${srcdir}/131-gcc-4.0-windows-lrealpath-no-force-lowercase-nor-backslash.patch
  ${GIT_AM} ${srcdir}/132-gcc-4.3-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch
  ${GIT_AM} ${srcdir}/201-gcc-4.3-ada-Fix-wrong-case.patch
  ${GIT_AM} ${srcdir}/202-gcc-4.3-ada-Add-space-between-and-return.patch
  ${GIT_AM} ${srcdir}/704-gcc-4.3-Fix-texi-docs-syntax-errors.patch
  ${GIT_AM} ${srcdir}/705-gcc-4.3-texi2pod.pl-Escape-braces-in-regexp-involving-strong.patch

  if [[ "$_enable_ada" == "yes" && "$_enable_backstrap_ada" == "yes" ]]; then
    ${GIT_AM} ${srcdir}/906-Ada-build-fix-for-GCC-4.4-and-4.3-building-GCC-4.3.patch
  fi

  sed -i 's|${prefix}/mingw/|${prefix}/|g' configure

  # change hard coded /mingw prefix to the absolute forward slash prefix
  local MINGW_NATIVE_PREFIX=$(cygpath -am ${OPT_MINGW_PREFIX}${_include_sub_folder})
  sed -i "s|/mingw/|${MINGW_NATIVE_PREFIX}/|g" gcc/config/i386/mingw32.h
  # Replace "/mingw/" with the unix like path used
  sed -i "s|/mingw/|${OPT_MINGW_PREFIX}${_include_sub_folder}/|g" gcc/config/i386/t-mingw32
}

build() {
  # Set good default FLAGS
  export LDFLAGS="-pipe"
  export CPPFLAGS="-D__USE_MINGW_ANSI_STDIO=0"
  export CFLAGS="-pipe"
  #export CXXFLAGS="-pipe"
  if [[ "$_build_using_external_compiler" == "yes" ]]; then
    export CFLAGS+=" -std=gnu99" # GNAT GCC 4.1.3 defaults to a too low of std
  fi

  cd ${srcdir}/${_sourcedir}

  [[ -d ${srcdir}/build-${MSYSTEM} ]] && rm -rf ${srcdir}/build-${MSYSTEM}
  mkdir -p ${srcdir}/build-${MSYSTEM} && cd ${srcdir}/build-${MSYSTEM}

  if [[ "$_build_using_external_compiler" == "yes" ]]; then
    # GCC 4.1.3 from GNAT 2007 builds GCC4.3.x w/o Ada status works
    # GCC 4.1.3 from GNAT 2007 builds GCC4.3.x with Ada status works
    local _GNAT_year=2007
    if [ "$_GNAT_year" == "2007" ]; then
      local _compiler_toolchain_host=pentium-mingw32msv
    else
      local _compiler_toolchain_host=i686-pc-mingw32
    fi
    local _compiler_toolchain_prefix=/h/GNAT/${_GNAT_year}
    export PATH=${OPT_MINGW_PREFIX}/bin:${_compiler_toolchain_prefix}/bin:$PATH
    #export AR="${_compiler_toolchain_prefix}/bin/ar"
    #export AS="${_compiler_toolchain_prefix}/bin/as"
    #export LD="${_compiler_toolchain_prefix}/bin/ld"
    export CC="${_compiler_toolchain_prefix}/bin/${_compiler_toolchain_host}-gcc"
    if [ "$_GNAT_year" != "2007" ]; then
      export CXX="${_compiler_toolchain_prefix}/bin/${_compiler_toolchain_host}-g++"
    fi
    if [ "$_enable_ada" == "yes" ]; then
      export GNATMAKE="${_compiler_toolchain_prefix}/bin/gnatmake"
      export GNATBIND="${_compiler_toolchain_prefix}/bin/gnatbind"
      #export ADA_INCLUDE_PATH="${_compiler_toolchain_prefix}/lib/gcc/${_compiler_toolchain_host}/4.1.3/adainclude"
    fi
  else
    export CC+=" -L${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}"
    export PATH=${OPT_MINGW_PREFIX}/bin:${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}:$PATH
  fi
  echo "PATH := $PATH"
  echo "installation root := $(cygpath -am /)"
  ${CC} --version
  pacman -Qs "${OPT_MINGW_PACKAGE_PREFIX}-toolchain" | grep "${OPT_MINGW_PACKAGE_PREFIX}" || true

  declare -a extra_config
  extra_config+=("--disable-libstdcxx-debug")

  case "${CARCH}" in
    i686)
      extra_config+=("--with-dwarf2")
      extra_config+=("--disable-sjlj-exceptions")

      #LDFLAGS+=" -Wl,--large-address-aware"
      local _arch=i686
    ;;

    x86_64)
      local _arch=x86-64
    ;;
  esac

  if [[ "$_enable_bootstrap" == "yes" ]]; then
    extra_config+=("--enable-bootstrap")
  elif [[ "$_enable_bootstrap" == "no" ]]; then
    extra_config+=("--disable-bootstrap")
  fi

  local _languages="c"
  if [ "$_enable_ada" == "yes" ]; then
    _languages+=",ada"
  fi

  if [[ "$_enable_ada" != "yes" ]]; then
    extra_config+=('--disable-libada')
  fi

  #extra_config+=('--disable-libstdcxx')
  extra_config+=('--disable-threads')
  #extra_config+=("--disable-libgomp")

  echo ""
  echo "OPT_MINGW_PREFIX := ${OPT_MINGW_PREFIX}"
  echo ""
  echo "OPT_MINGW_PACKAGE_PREFIX := ${OPT_MINGW_PACKAGE_PREFIX}"
  echo ""
  echo "LDFLAGS := ${LDFLAGS}"
  echo ""
  echo "CC := ${CC}"
  echo ""
  echo "CPPFLAGS := ${CPPFLAGS}"
  echo ""
  echo "ADA_INCLUDE_PATH := ${ADA_INCLUDE_PATH}"
  echo ""
  echo "ADA_OBJECT_PATH := ${ADA_OBJECT_PATH}"
  echo ""
  echo "extra_config contains ${extra_config[@]}"
  echo ""

  if [[ "$_enable_ada" == "yes" ]]; then
    # configure fails to give clear reason for failure
    ${CC} -c ${srcdir}/conftest.adb
  fi

  ../${_sourcedir}/configure \
    --prefix=${OPT_MINGW_PREFIX} \
    --with-local-prefix=${OPT_MINGW_PREFIX}/local \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --libexecdir=${OPT_MINGW_PREFIX}/lib \
    --enable-checking=release \
    --enable-languages=${_languages} \
    --disable-shared --enable-static \
    --enable-fully-dynamic-string \
    --disable-libstdcxx-pch \
    --disable-multilib \
    --disable-win32-registry \
    --disable-nls \
    --disable-werror \
    --disable-symvers \
    --with-system-zlib \
    --with-libiconv-prefix=${OPT_MINGW_PREFIX} \
    --with-pkgversion="Rev ${pkgver##*.g}-${pkgrel}, Built by stahta01" \
    --with-bugurl="https://github.com/stahta01/mingw64_gcc_msys2_packages/issues" \
    --with-gnu-as --with-gnu-ld \
    "${extra_config[@]}"

  make all V=1 --jobs=1

  #if [[ "$_enable_ada" == "yes" && "$_enable_backstrap_ada" == "yes" ]]; then
    #make all-gcc V=1 --jobs=1 -k || true
  #else
    #make all-gcc V=1 --jobs=1
  #fi
  #make all-target-libgcc V=1 --jobs=1

  #if [ "$_enable_ada" == "yes" ]; then
    #make all-gnattools V=1 --jobs=1 -k
    #make all-target-libada V=1 --jobs=1 -k
  #fi
}

package() {
  pkgdesc="GNU Compiler Collection ${_base_ver} (mingw-w64)"
  depends=("${OPT_MINGW_PACKAGE_PREFIX}-crt"
           "${OPT_MINGW_PACKAGE_PREFIX}-headers"
           "${OPT_MINGW_PACKAGE_PREFIX}-zlib"
           "${OPT_MINGW_PACKAGE_PREFIX}-windows-default-manifest")
  depends+=("${OPT_MINGW_PACKAGE_PREFIX}-binutils")
  depends+=("${OPT_MINGW_PACKAGE_PREFIX}-libiconv")
  provides=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}"
            "${OPT_MINGW_PACKAGE_PREFIX}-cc")
  conflicts=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}")
  if [ "$_enable_ada" == "yes" ]; then
    provides+=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-ada")
    conflicts+=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-ada")
  fi

  cd "${srcdir}/build-${MSYSTEM}"
  export PATH=${OPT_MINGW_PREFIX}/bin:$PATH

  make -j1 DESTDIR="${pkgdir}" install

  #make -j1 DESTDIR="${pkgdir}" install-gcc
  #make -j1 DESTDIR="${pkgdir}" install-target-libgcc
  #if [ "$_enable_ada" == "yes" ]; then
    #make install-gnattools V=1 --jobs=1
    #make install-target-libada V=1 --jobs=1
  #fi

  rm -f ${pkgdir}${OPT_MINGW_PREFIX}/info/dir

  # License files
  install -Dm644 "${srcdir}/${_sourcedir}/COPYING3"        "${pkgdir}${OPT_MINGW_PREFIX}/share/licenses/${_realname}/COPYING3"
  install -Dm644 "${srcdir}/${_sourcedir}/COPYING.LIB"     "${pkgdir}${OPT_MINGW_PREFIX}/share/licenses/${_realname}/COPYING.LIB"
}
