# Maintainer:  Tim Stahlhut <stahta01@gmail.com>
# Contributor: Alexey Pavlov

_build_using_external_compiler=no

if [[ "$_build_using_external_compiler" == "yes" && \
       "${MSYSTEM_CARCH}" == "x86_64" ]]; then
  _build_using_external_compiler=no
fi

_include_sub_folder=/${MINGW_CHOST}
OPT_MINGW_PREFIX=/opt${MINGW_PREFIX}
if [[ "$MSYSTEM" == "UCRT64" ]]; then
  OPT_MINGW_PACKAGE_PREFIX=opt-ucrt-${MSYSTEM_CARCH}
else
  OPT_MINGW_PACKAGE_PREFIX=opt-mingw-${MSYSTEM_CARCH}
fi

_realname=crt
_sourcedir=mingw-w64-git
pkgbase=opt-mingw-${_realname}6
pkgname=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-git"
         "${OPT_MINGW_PACKAGE_PREFIX}-headers-git"
         "${OPT_MINGW_PACKAGE_PREFIX}-pthread-stub-headers-git")
pkgver=6.0.0.5241.e174bf62d33d
pkgrel=1
_commit='e174bf62d33d26b9fee56ef45e8d8566d01a5af7'
pkgdesc='MinGW-w64 CRT for Windows'
arch=('any')
url='https://mingw-w64.sourceforge.io/'
license=('custom')
groups=("${OPT_MINGW_PACKAGE_PREFIX}-toolchain")
makedepends=(
  "git"
  $([[ "$_build_using_external_compiler" != "yes" ]] && echo "${OPT_MINGW_PACKAGE_PREFIX}-cc")
  #"${OPT_MINGW_PACKAGE_PREFIX}-binutils"
)
provides=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}")
conflicts=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}")
options=('!strip' 'staticlibs' '!buildflags' '!emptydirs')
source=("${_sourcedir}"::"git+https://git.code.sf.net/p/mingw-w64/mingw-w64#commit=$_commit")
sha256sums=('SKIP')

# Declare global variables; begin with underscore to avoid name conflicts
_git_base_commit=

pkgver() {
  cd "${srcdir}/${_sourcedir}"
  local _major=$(head -n 16 mingw-w64-headers/crt/_mingw_mac.h | grep '__MINGW64_VERSION_MAJOR' | sed -e 's/.* //' | tr '\n' '.' | sed 's/.$/\n/')
  local _minor=$(head -n 16 mingw-w64-headers/crt/_mingw_mac.h | grep '__MINGW64_VERSION_MINOR' | sed -e 's/.* //' | tr '\n' '.' | sed 's/.$/\n/')
  local _rev=0
  printf "%s.%s.%s.%s.%s" ${_major} ${_minor} ${_rev} "$(git rev-list --count ${_git_base_commit})" "$(git rev-parse --short=12 ${_git_base_commit})"
}

prepare() {
  cd "${srcdir}/${_sourcedir}"

  _git_base_commit=$(git rev-parse HEAD)
}

build() {
  if [[ "$_build_using_external_compiler" != "yes" ]]; then
    export PATH=${OPT_MINGW_PREFIX}/bin:$PATH
  else
    if [[ "${MSYSTEM_CARCH}" == "x86_64" ]]; then
      local _ext_compiler=/h/GNAT/2018 # GCC 7.3.1
    else
      local _ext_compiler=/h/GNAT/2015 # GCC 4.9.x
    fi
    export PATH=${_ext_compiler}/bin:${OPT_MINGW_PREFIX}/bin:/mingw64/bin:$PATH
    export CC="${_ext_compiler}/bin/gcc"
    export CXX="${_ext_compiler}/bin/g++"
    export LD="${_ext_compiler}/bin/ld"
    export GNATMAKE="${_ext_compiler}/bin/gnatmake"
    export GNATBIND="${_ext_compiler}/bin/gnatbind"
  fi
  echo "PATH := $PATH"

  msg "Configuring ${MSYSTEM} headers"
  [[ -d ${srcdir}/headers-${MSYSTEM} ]] && rm -rf ${srcdir}/headers-${MSYSTEM}
  mkdir -p ${srcdir}/headers-${MSYSTEM} && cd ${srcdir}/headers-${MSYSTEM}

  ${srcdir}/${_sourcedir}/mingw-w64-headers/configure \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --prefix=${OPT_MINGW_PREFIX}${_include_sub_folder} \
    --enable-sdk=all \
    --enable-secure-api \
    --enable-idl --without-widl

  msg "Installing local copy of ${MSYSTEM} headers"
  cd ${srcdir}/headers-${MSYSTEM}
  rm -fr ${srcdir}/${OPT_MINGW_PREFIX}${_include_sub_folder}/include
  make DESTDIR=${srcdir} install

  msg "Building ${MSYSTEM} CRT"
  case "$CARCH" in
    i686)
      _crt_configure_args="--disable-lib64 --enable-lib32"
    ;;
    x86_64)
      _crt_configure_args="--disable-lib32 --enable-lib64"
    ;;
  esac

  [[ -d ${srcdir}/crt-${MSYSTEM} ]] && rm -rf ${srcdir}/crt-${MSYSTEM}
  mkdir -p ${srcdir}/crt-${MSYSTEM} && cd ${srcdir}/crt-${MSYSTEM}
  CFLAGS+=" -I${srcdir}/${OPT_MINGW_PREFIX}${_include_sub_folder}/include" \
  ${srcdir}/${_sourcedir}/mingw-w64-crt/configure \
    --prefix=${OPT_MINGW_PREFIX}${_include_sub_folder} \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --with-sysroot=${OPT_MINGW_PREFIX}${_include_sub_folder} \
    --enable-wildcard \
    ${_crt_configure_args}
  make
}

package_crt-git() {
  depends=("${OPT_MINGW_PACKAGE_PREFIX}-headers-git")

  msg "Installing ${MSYSTEM} crt"
  cd ${srcdir}/crt-${MSYSTEM}
  make DESTDIR=${pkgdir} install-strip
}

package_headers-git() {
  pkgdesc="MinGW-w64 headers for Windows"
  provides=("${OPT_MINGW_PACKAGE_PREFIX}-headers")
  conflicts=("${OPT_MINGW_PACKAGE_PREFIX}-headers")

  msg "Copying ${MSYSTEM} headers"
  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}${_include_sub_folder}
  cp --recursive ${srcdir}${OPT_MINGW_PREFIX}${_include_sub_folder}/include ${pkgdir}${OPT_MINGW_PREFIX}${_include_sub_folder}/

  rm ${pkgdir}${OPT_MINGW_PREFIX}${_include_sub_folder}/include/pthread_signal.h
  rm ${pkgdir}${OPT_MINGW_PREFIX}${_include_sub_folder}/include/pthread_time.h
  rm ${pkgdir}${OPT_MINGW_PREFIX}${_include_sub_folder}/include/pthread_unistd.h

  msg "Installing MinGW-w64 licenses"
  install -Dm644 ${srcdir}/${_sourcedir}/mingw-w64-headers/ddk/readme.txt ${pkgdir}${OPT_MINGW_PREFIX}/share/licenses/${_realname}/ddk-readme.txt
  install -Dm644 ${srcdir}/${_sourcedir}/mingw-w64-headers/direct-x/COPYING.LIB ${pkgdir}${OPT_MINGW_PREFIX}/share/licenses/${_realname}/direct-x-COPYING.LIB
  install -Dm644 ${srcdir}/${_sourcedir}/mingw-w64-headers/direct-x/readme.txt ${pkgdir}${OPT_MINGW_PREFIX}/share/licenses/${_realname}/direct-x-readme.txt
}

package_pthread-stub-headers-git() {
    pkgdesc="MinGW-w64 pthread stub headers for Windows"
    provides=("${OPT_MINGW_PACKAGE_PREFIX}-pthread-stub-headers")
    conflicts=("${OPT_MINGW_PACKAGE_PREFIX}-pthread-stub-headers" "${OPT_MINGW_PACKAGE_PREFIX}-winpthreads")
    msg "Copying ${MSYSTEM} pthread stub headers"

    mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}${_include_sub_folder}/include

    cp ${srcdir}${OPT_MINGW_PREFIX}${_include_sub_folder}/include/pthread_signal.h ${pkgdir}${OPT_MINGW_PREFIX}${_include_sub_folder}/include/
    cp ${srcdir}${OPT_MINGW_PREFIX}${_include_sub_folder}/include/pthread_time.h   ${pkgdir}${OPT_MINGW_PREFIX}${_include_sub_folder}/include/
    cp ${srcdir}${OPT_MINGW_PREFIX}${_include_sub_folder}/include/pthread_unistd.h ${pkgdir}${OPT_MINGW_PREFIX}${_include_sub_folder}/include/
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${OPT_MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
