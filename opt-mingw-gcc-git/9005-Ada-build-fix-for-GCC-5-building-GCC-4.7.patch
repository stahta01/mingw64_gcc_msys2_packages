From 0570567d4af05cad45d4c2ddbc94d3bea9228588 Mon Sep 17 00:00:00 2001
From: Tristan Gingold <gingold@adacore.com>
Date: Tue, 15 May 2012 10:17:26 +0000
Subject: Ada build fix for GCC 5 building GCC 4.7

A small part of SVN r187517

With Modifications by Tim S.
---
 gcc/ada/a-except.adb               | 508 +++++++++++++++++++++++------
 gcc/ada/adaint.c                   |   6 +-
 gcc/ada/gcc-interface/Make-lang.in |   5 +-
 gcc/ada/gcc-interface/Makefile.in  |   6 +-
 gcc/ada/mingw32.h                  |   1 +
 5 files changed, 430 insertions(+), 96 deletions(-)

diff --git a/gcc/ada/a-except.adb b/gcc/ada/a-except.adb
index f34d4975612..bfcf95e55a2 100644
--- a/gcc/ada/a-except.adb
+++ b/gcc/ada/a-except.adb
@@ -354,10 +354,198 @@ package body Ada.Exceptions is
    -- Run-Time Check Routines --
    -----------------------------
 
-   --  Routines to a specific exception with a reason message attached. The
-   --  parameters are the file name and line number in each case. The names are
-   --  keyed to the codes defined in types.ads and a-types.h (for example, the
-   --  name Rcheck_05 refers to the Reason RT_Exception_Code'Val (5)).
+   --  These routines raise a specific exception with a reason message
+   --  attached. The parameters are the file name and line number in each
+   --  case. The names are defined by Exp_Ch11.Get_RT_Exception_Name.
+
+   procedure Rcheck_CE_Access_Check
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_CE_Null_Access_Parameter
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_CE_Discriminant_Check
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_CE_Divide_By_Zero
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_CE_Explicit_Raise
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_CE_Index_Check
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_CE_Invalid_Data
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_CE_Length_Check
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_CE_Null_Exception_Id
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_CE_Null_Not_Allowed
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_CE_Overflow_Check
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_CE_Partition_Check
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_CE_Range_Check
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_CE_Tag_Check
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Access_Before_Elaboration
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Accessibility_Check
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Address_Of_Intrinsic
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_All_Guards_Closed
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Bad_Predicated_Generic_Type
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Current_Task_In_Entry_Body
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Duplicated_Entry_Address
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Explicit_Raise
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Implicit_Return
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Misaligned_Address_Value
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Missing_Return
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Overlaid_Controlled_Object
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Potentially_Blocking_Operation
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Stubbed_Subprogram_Called
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Unchecked_Union_Restriction
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_PE_Non_Transportable_Actual
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_SE_Empty_Storage_Pool
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_SE_Explicit_Raise
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_SE_Infinite_Recursion
+     (File : System.Address; Line : Integer);
+   procedure Rcheck_SE_Object_Too_Large
+     (File : System.Address; Line : Integer);
+
+   procedure Rcheck_PE_Finalize_Raised_Exception
+     (File : System.Address; Line : Integer);
+   --  This routine is separated out because it has quite different behavior
+   --  from the others. This is the "finalize/adjust raised exception". This
+   --  subprogram is always called with abort deferred, unlike all other
+   --  Rcheck_* routines, it needs to call Raise_Exception_No_Defer.
+
+   pragma Export (C, Rcheck_CE_Access_Check,
+                  "__gnat_rcheck_CE_Access_Check");
+   pragma Export (C, Rcheck_CE_Null_Access_Parameter,
+                  "__gnat_rcheck_CE_Null_Access_Parameter");
+   pragma Export (C, Rcheck_CE_Discriminant_Check,
+                  "__gnat_rcheck_CE_Discriminant_Check");
+   pragma Export (C, Rcheck_CE_Divide_By_Zero,
+                  "__gnat_rcheck_CE_Divide_By_Zero");
+   pragma Export (C, Rcheck_CE_Explicit_Raise,
+                  "__gnat_rcheck_CE_Explicit_Raise");
+   pragma Export (C, Rcheck_CE_Index_Check,
+                  "__gnat_rcheck_CE_Index_Check");
+   pragma Export (C, Rcheck_CE_Invalid_Data,
+                  "__gnat_rcheck_CE_Invalid_Data");
+   pragma Export (C, Rcheck_CE_Length_Check,
+                  "__gnat_rcheck_CE_Length_Check");
+   pragma Export (C, Rcheck_CE_Null_Exception_Id,
+                  "__gnat_rcheck_CE_Null_Exception_Id");
+   pragma Export (C, Rcheck_CE_Null_Not_Allowed,
+                  "__gnat_rcheck_CE_Null_Not_Allowed");
+   pragma Export (C, Rcheck_CE_Overflow_Check,
+                  "__gnat_rcheck_CE_Overflow_Check");
+   pragma Export (C, Rcheck_CE_Partition_Check,
+                  "__gnat_rcheck_CE_Partition_Check");
+   pragma Export (C, Rcheck_CE_Range_Check,
+                  "__gnat_rcheck_CE_Range_Check");
+   pragma Export (C, Rcheck_CE_Tag_Check,
+                  "__gnat_rcheck_CE_Tag_Check");
+   pragma Export (C, Rcheck_PE_Access_Before_Elaboration,
+                  "__gnat_rcheck_PE_Access_Before_Elaboration");
+   pragma Export (C, Rcheck_PE_Accessibility_Check,
+                  "__gnat_rcheck_PE_Accessibility_Check");
+   pragma Export (C, Rcheck_PE_Address_Of_Intrinsic,
+                  "__gnat_rcheck_PE_Address_Of_Intrinsic");
+   pragma Export (C, Rcheck_PE_All_Guards_Closed,
+                  "__gnat_rcheck_PE_All_Guards_Closed");
+   pragma Export (C, Rcheck_PE_Bad_Predicated_Generic_Type,
+                  "__gnat_rcheck_PE_Bad_Predicated_Generic_Type");
+   pragma Export (C, Rcheck_PE_Current_Task_In_Entry_Body,
+                  "__gnat_rcheck_PE_Current_Task_In_Entry_Body");
+   pragma Export (C, Rcheck_PE_Duplicated_Entry_Address,
+                  "__gnat_rcheck_PE_Duplicated_Entry_Address");
+   pragma Export (C, Rcheck_PE_Explicit_Raise,
+                  "__gnat_rcheck_PE_Explicit_Raise");
+   pragma Export (C, Rcheck_PE_Finalize_Raised_Exception,
+                  "__gnat_rcheck_PE_Finalize_Raised_Exception");
+   pragma Export (C, Rcheck_PE_Implicit_Return,
+                  "__gnat_rcheck_PE_Implicit_Return");
+   pragma Export (C, Rcheck_PE_Misaligned_Address_Value,
+                  "__gnat_rcheck_PE_Misaligned_Address_Value");
+   pragma Export (C, Rcheck_PE_Missing_Return,
+                  "__gnat_rcheck_PE_Missing_Return");
+   pragma Export (C, Rcheck_PE_Overlaid_Controlled_Object,
+                  "__gnat_rcheck_PE_Overlaid_Controlled_Object");
+   pragma Export (C, Rcheck_PE_Potentially_Blocking_Operation,
+                  "__gnat_rcheck_PE_Potentially_Blocking_Operation");
+   pragma Export (C, Rcheck_PE_Stubbed_Subprogram_Called,
+                  "__gnat_rcheck_PE_Stubbed_Subprogram_Called");
+   pragma Export (C, Rcheck_PE_Unchecked_Union_Restriction,
+                  "__gnat_rcheck_PE_Unchecked_Union_Restriction");
+   pragma Export (C, Rcheck_PE_Non_Transportable_Actual,
+                  "__gnat_rcheck_PE_Non_Transportable_Actual");
+   pragma Export (C, Rcheck_SE_Empty_Storage_Pool,
+                  "__gnat_rcheck_SE_Empty_Storage_Pool");
+   pragma Export (C, Rcheck_SE_Explicit_Raise,
+                  "__gnat_rcheck_SE_Explicit_Raise");
+   pragma Export (C, Rcheck_SE_Infinite_Recursion,
+                  "__gnat_rcheck_SE_Infinite_Recursion");
+   pragma Export (C, Rcheck_SE_Object_Too_Large,
+                  "__gnat_rcheck_SE_Object_Too_Large");
+
+   --  None of these procedures ever returns (they raise an exception!). By
+   --  using pragma No_Return, we ensure that any junk code after the call,
+   --  such as normal return epilog stuff, can be eliminated).
+
+   pragma No_Return (Rcheck_CE_Access_Check);
+   pragma No_Return (Rcheck_CE_Null_Access_Parameter);
+   pragma No_Return (Rcheck_CE_Discriminant_Check);
+   pragma No_Return (Rcheck_CE_Divide_By_Zero);
+   pragma No_Return (Rcheck_CE_Explicit_Raise);
+   pragma No_Return (Rcheck_CE_Index_Check);
+   pragma No_Return (Rcheck_CE_Invalid_Data);
+   pragma No_Return (Rcheck_CE_Length_Check);
+   pragma No_Return (Rcheck_CE_Null_Exception_Id);
+   pragma No_Return (Rcheck_CE_Null_Not_Allowed);
+   pragma No_Return (Rcheck_CE_Overflow_Check);
+   pragma No_Return (Rcheck_CE_Partition_Check);
+   pragma No_Return (Rcheck_CE_Range_Check);
+   pragma No_Return (Rcheck_CE_Tag_Check);
+   pragma No_Return (Rcheck_PE_Access_Before_Elaboration);
+   pragma No_Return (Rcheck_PE_Accessibility_Check);
+   pragma No_Return (Rcheck_PE_Address_Of_Intrinsic);
+   pragma No_Return (Rcheck_PE_All_Guards_Closed);
+   pragma No_Return (Rcheck_PE_Bad_Predicated_Generic_Type);
+   pragma No_Return (Rcheck_PE_Current_Task_In_Entry_Body);
+   pragma No_Return (Rcheck_PE_Duplicated_Entry_Address);
+   pragma No_Return (Rcheck_PE_Explicit_Raise);
+   pragma No_Return (Rcheck_PE_Implicit_Return);
+   pragma No_Return (Rcheck_PE_Misaligned_Address_Value);
+   pragma No_Return (Rcheck_PE_Missing_Return);
+   pragma No_Return (Rcheck_PE_Overlaid_Controlled_Object);
+   pragma No_Return (Rcheck_PE_Potentially_Blocking_Operation);
+   pragma No_Return (Rcheck_PE_Stubbed_Subprogram_Called);
+   pragma No_Return (Rcheck_PE_Unchecked_Union_Restriction);
+   pragma No_Return (Rcheck_PE_Non_Transportable_Actual);
+   pragma No_Return (Rcheck_PE_Finalize_Raised_Exception);
+   pragma No_Return (Rcheck_SE_Empty_Storage_Pool);
+   pragma No_Return (Rcheck_SE_Explicit_Raise);
+   pragma No_Return (Rcheck_SE_Infinite_Recursion);
+   pragma No_Return (Rcheck_SE_Object_Too_Large);
+
+   --  For compatibility with previous version of GNAT, to preserve bootstrap
 
    procedure Rcheck_00 (File : System.Address; Line : Integer);
    procedure Rcheck_01 (File : System.Address; Line : Integer);
@@ -395,12 +583,6 @@ package body Ada.Exceptions is
    procedure Rcheck_34 (File : System.Address; Line : Integer);
 
    procedure Rcheck_22 (File : System.Address; Line : Integer);
-   --  This routine is separated out because it has quite different behavior
-   --  from the others. This is the "finalize/adjust raised exception". This
-   --  subprogram is always called with abort deferred, unlike all other
-   --  Rcheck_* routines, it needs to call Raise_Exception_No_Defer.
-   --
-   --  It should probably have a distinguished name ???
 
    pragma Export (C, Rcheck_00, "__gnat_rcheck_00");
    pragma Export (C, Rcheck_01, "__gnat_rcheck_01");
@@ -979,189 +1161,331 @@ package body Ada.Exceptions is
    -- Calls to Run-Time Check Routines --
    --------------------------------------
 
-   procedure Rcheck_00 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Access_Check
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_00'Address);
-   end Rcheck_00;
+   end Rcheck_CE_Access_Check;
 
-   procedure Rcheck_01 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Null_Access_Parameter
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_01'Address);
-   end Rcheck_01;
+   end Rcheck_CE_Null_Access_Parameter;
 
-   procedure Rcheck_02 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Discriminant_Check
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_02'Address);
-   end Rcheck_02;
+   end Rcheck_CE_Discriminant_Check;
 
-   procedure Rcheck_03 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Divide_By_Zero
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_03'Address);
-   end Rcheck_03;
+   end Rcheck_CE_Divide_By_Zero;
 
-   procedure Rcheck_04 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Explicit_Raise
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_04'Address);
-   end Rcheck_04;
+   end Rcheck_CE_Explicit_Raise;
 
-   procedure Rcheck_05 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Index_Check
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_05'Address);
-   end Rcheck_05;
+   end Rcheck_CE_Index_Check;
 
-   procedure Rcheck_06 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Invalid_Data
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_06'Address);
-   end Rcheck_06;
+   end Rcheck_CE_Invalid_Data;
 
-   procedure Rcheck_07 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Length_Check
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_07'Address);
-   end Rcheck_07;
+   end Rcheck_CE_Length_Check;
 
-   procedure Rcheck_08 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Null_Exception_Id
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_08'Address);
-   end Rcheck_08;
+   end Rcheck_CE_Null_Exception_Id;
 
-   procedure Rcheck_09 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Null_Not_Allowed
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_09'Address);
-   end Rcheck_09;
+   end Rcheck_CE_Null_Not_Allowed;
 
-   procedure Rcheck_10 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Overflow_Check
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_10'Address);
-   end Rcheck_10;
+   end Rcheck_CE_Overflow_Check;
 
-   procedure Rcheck_11 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Partition_Check
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_11'Address);
-   end Rcheck_11;
+   end Rcheck_CE_Partition_Check;
 
-   procedure Rcheck_12 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Range_Check
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_12'Address);
-   end Rcheck_12;
+   end Rcheck_CE_Range_Check;
 
-   procedure Rcheck_13 (File : System.Address; Line : Integer) is
+   procedure Rcheck_CE_Tag_Check
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Constraint_Error_Msg (File, Line, Rmsg_13'Address);
-   end Rcheck_13;
+   end Rcheck_CE_Tag_Check;
 
-   procedure Rcheck_14 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Access_Before_Elaboration
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_14'Address);
-   end Rcheck_14;
+   end Rcheck_PE_Access_Before_Elaboration;
 
-   procedure Rcheck_15 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Accessibility_Check
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_15'Address);
-   end Rcheck_15;
+   end Rcheck_PE_Accessibility_Check;
 
-   procedure Rcheck_16 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Address_Of_Intrinsic
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_16'Address);
-   end Rcheck_16;
+   end Rcheck_PE_Address_Of_Intrinsic;
 
-   procedure Rcheck_17 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_All_Guards_Closed
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_17'Address);
-   end Rcheck_17;
+   end Rcheck_PE_All_Guards_Closed;
 
-   procedure Rcheck_18 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Bad_Predicated_Generic_Type
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_18'Address);
-   end Rcheck_18;
+   end Rcheck_PE_Bad_Predicated_Generic_Type;
 
-   procedure Rcheck_19 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Current_Task_In_Entry_Body
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_19'Address);
-   end Rcheck_19;
+   end Rcheck_PE_Current_Task_In_Entry_Body;
 
-   procedure Rcheck_20 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Duplicated_Entry_Address
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_20'Address);
-   end Rcheck_20;
+   end Rcheck_PE_Duplicated_Entry_Address;
 
-   procedure Rcheck_21 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Explicit_Raise
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_21'Address);
-   end Rcheck_21;
+   end Rcheck_PE_Explicit_Raise;
 
-   procedure Rcheck_22 (File : System.Address; Line : Integer) is
-      E : constant Exception_Id := Program_Error_Def'Access;
-
-   begin
-      --  This is "finalize/adjust raised exception". This subprogram is always
-      --  called with abort deferred, unlike all other Rcheck_* routines, it
-      --  needs to call Raise_Exception_No_Defer.
-
-      --  This is consistent with Raise_From_Controlled_Operation
-
-      Exception_Data.Set_Exception_C_Msg (E, File, Line, 0, Rmsg_22'Address);
-      Raise_Current_Excep (E);
-   end Rcheck_22;
-
-   procedure Rcheck_23 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Implicit_Return
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_23'Address);
-   end Rcheck_23;
+   end Rcheck_PE_Implicit_Return;
 
-   procedure Rcheck_24 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Misaligned_Address_Value
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_24'Address);
-   end Rcheck_24;
+   end Rcheck_PE_Misaligned_Address_Value;
 
-   procedure Rcheck_25 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Missing_Return
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_25'Address);
-   end Rcheck_25;
+   end Rcheck_PE_Missing_Return;
 
-   procedure Rcheck_26 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Overlaid_Controlled_Object
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_26'Address);
-   end Rcheck_26;
+   end Rcheck_PE_Overlaid_Controlled_Object;
 
-   procedure Rcheck_27 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Potentially_Blocking_Operation
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_27'Address);
-   end Rcheck_27;
+   end Rcheck_PE_Potentially_Blocking_Operation;
 
-   procedure Rcheck_28 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Stubbed_Subprogram_Called
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_28'Address);
-   end Rcheck_28;
+   end Rcheck_PE_Stubbed_Subprogram_Called;
 
-   procedure Rcheck_29 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Unchecked_Union_Restriction
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_29'Address);
-   end Rcheck_29;
+   end Rcheck_PE_Unchecked_Union_Restriction;
 
-   procedure Rcheck_30 (File : System.Address; Line : Integer) is
+   procedure Rcheck_PE_Non_Transportable_Actual
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Program_Error_Msg (File, Line, Rmsg_30'Address);
-   end Rcheck_30;
+   end Rcheck_PE_Non_Transportable_Actual;
 
-   procedure Rcheck_31 (File : System.Address; Line : Integer) is
+   procedure Rcheck_SE_Empty_Storage_Pool
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Storage_Error_Msg (File, Line, Rmsg_31'Address);
-   end Rcheck_31;
+   end Rcheck_SE_Empty_Storage_Pool;
 
-   procedure Rcheck_32 (File : System.Address; Line : Integer) is
+   procedure Rcheck_SE_Explicit_Raise
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Storage_Error_Msg (File, Line, Rmsg_32'Address);
-   end Rcheck_32;
+   end Rcheck_SE_Explicit_Raise;
 
-   procedure Rcheck_33 (File : System.Address; Line : Integer) is
+   procedure Rcheck_SE_Infinite_Recursion
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Storage_Error_Msg (File, Line, Rmsg_33'Address);
-   end Rcheck_33;
+   end Rcheck_SE_Infinite_Recursion;
 
-   procedure Rcheck_34 (File : System.Address; Line : Integer) is
+   procedure Rcheck_SE_Object_Too_Large
+     (File : System.Address; Line : Integer)
+   is
    begin
       Raise_Storage_Error_Msg (File, Line, Rmsg_34'Address);
-   end Rcheck_34;
+   end Rcheck_SE_Object_Too_Large;
+
+   procedure Rcheck_PE_Finalize_Raised_Exception
+     (File : System.Address; Line : Integer)
+   is
+      E : constant Exception_Id := Program_Error_Def'Access;
+
+   begin
+      --  This is "finalize/adjust raised exception". This subprogram is always
+      --  called with abort deferred, unlike all other Rcheck_* routines, it
+      --  needs to call Raise_Exception_No_Defer.
+
+      --  This is consistent with Raise_From_Controlled_Operation
+
+      Exception_Data.Set_Exception_C_Msg (E, File, Line, 0, Rmsg_22'Address);
+      Raise_Current_Excep (E);
+   end Rcheck_PE_Finalize_Raised_Exception;
+
+   procedure Rcheck_00 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Access_Check;
+   procedure Rcheck_01 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Null_Access_Parameter;
+   procedure Rcheck_02 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Discriminant_Check;
+   procedure Rcheck_03 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Divide_By_Zero;
+   procedure Rcheck_04 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Explicit_Raise;
+   procedure Rcheck_05 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Index_Check;
+   procedure Rcheck_06 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Invalid_Data;
+   procedure Rcheck_07 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Length_Check;
+   procedure Rcheck_08 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Null_Exception_Id;
+   procedure Rcheck_09 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Null_Not_Allowed;
+   procedure Rcheck_10 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Overflow_Check;
+   procedure Rcheck_11 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Partition_Check;
+   procedure Rcheck_12 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Range_Check;
+   procedure Rcheck_13 (File : System.Address; Line : Integer)
+     renames Rcheck_CE_Tag_Check;
+   procedure Rcheck_14 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Access_Before_Elaboration;
+   procedure Rcheck_15 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Accessibility_Check;
+   procedure Rcheck_16 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Address_Of_Intrinsic;
+   procedure Rcheck_17 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_All_Guards_Closed;
+   procedure Rcheck_18 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Bad_Predicated_Generic_Type;
+   procedure Rcheck_19 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Current_Task_In_Entry_Body;
+   procedure Rcheck_20 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Duplicated_Entry_Address;
+   procedure Rcheck_21 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Explicit_Raise;
+   procedure Rcheck_23 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Implicit_Return;
+   procedure Rcheck_24 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Misaligned_Address_Value;
+   procedure Rcheck_25 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Missing_Return;
+   procedure Rcheck_26 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Overlaid_Controlled_Object;
+   procedure Rcheck_27 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Potentially_Blocking_Operation;
+   procedure Rcheck_28 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Stubbed_Subprogram_Called;
+   procedure Rcheck_29 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Unchecked_Union_Restriction;
+   procedure Rcheck_30 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Non_Transportable_Actual;
+   procedure Rcheck_31 (File : System.Address; Line : Integer)
+     renames Rcheck_SE_Empty_Storage_Pool;
+   procedure Rcheck_32 (File : System.Address; Line : Integer)
+     renames Rcheck_SE_Explicit_Raise;
+   procedure Rcheck_33 (File : System.Address; Line : Integer)
+     renames Rcheck_SE_Infinite_Recursion;
+   procedure Rcheck_34 (File : System.Address; Line : Integer)
+     renames Rcheck_SE_Object_Too_Large;
+
+   procedure Rcheck_22 (File : System.Address; Line : Integer)
+     renames Rcheck_PE_Finalize_Raised_Exception;
 
    -------------
    -- Reraise --
diff --git a/gcc/ada/adaint.c b/gcc/ada/adaint.c
index 83916a42f2a..9031bffbb32 100644
--- a/gcc/ada/adaint.c
+++ b/gcc/ada/adaint.c
@@ -116,8 +116,9 @@ extern "C" {
 #else
 #include "mingw32.h"
 
-/* Current code page to use, set in initialize.c.  */
+/* Current code page and CCS encoding to use, set in initialize.c.  */
 UINT CurrentCodePage;
+UINT CurrentCCSEncoding;
 #endif
 
 #include <sys/utime.h>
@@ -2522,6 +2523,9 @@ void (*Unlock_Task) () = &dummy;
 
 #else
 
+CRITICAL_SECTION ProcListCS;
+HANDLE ProcListEvt = NULL;
+
 #define Lock_Task system__soft_links__lock_task
 extern void (*Lock_Task) (void);
 
diff --git a/gcc/ada/gcc-interface/Make-lang.in b/gcc/ada/gcc-interface/Make-lang.in
index 0131e301030..e388cf3c46e 100644
--- a/gcc/ada/gcc-interface/Make-lang.in
+++ b/gcc/ada/gcc-interface/Make-lang.in
@@ -178,7 +178,8 @@ GCC_LINK=$(LINKER) $(GCC_LINKERFLAGS) -static-libgcc $(LDFLAGS)
 GNAT1_C_OBJS = ada/adadecode.o ada/adaint.o ada/argv.o ada/cio.o \
  ada/cstreams.o ada/env.o ada/init.o ada/initialize.o ada/raise.o \
  ada/seh_init.o ada/targext.o ada/tracebak.o ada/cuintp.o ada/decl.o \
- ada/misc.o ada/utils.o ada/utils2.o ada/trans.o ada/targtyps.o
+ ada/misc.o ada/utils.o ada/utils2.o ada/trans.o ada/targtyps.o \
+ ada/rtfinal.o ada/rtinit.o
 
 # Object files from Ada sources that are used by gnat1
 GNAT_ADA_OBJS =	\
@@ -473,6 +474,8 @@ GNATBIND_OBJS = \
  ada/output.o     \
  ada/restrict.o   \
  ada/rident.o     \
+ ada/rtfinal.o    \
+ ada/rtinit.o     \
  ada/s-addope.o   \
  ada/s-assert.o   \
  ada/s-carun8.o   \
diff --git a/gcc/ada/gcc-interface/Makefile.in b/gcc/ada/gcc-interface/Makefile.in
index 9f20f07986a..18a1de07f10 100644
--- a/gcc/ada/gcc-interface/Makefile.in
+++ b/gcc/ada/gcc-interface/Makefile.in
@@ -2243,8 +2243,8 @@ LIBGNAT_SRCS = adadecode.c adadecode.h adaint.c adaint.h	\
 
 LIBGNAT_OBJS = adadecode.o adaint.o argv.o cio.o cstreams.o ctrl_c.o	\
   errno.o exit.o env.o raise.o sysdep.o aux-io.o init.o initialize.o	\
-  locales.o seh_init.o cal.o arit64.o final.o tracebak.o expect.o       \
-  mkdir.o socket.o targext.o terminals.o $(EXTRA_LIBGNAT_OBJS)
+  locales.o seh_init.o cal.o arit64.o final.o rtfinal.o rtinit.o tracebak.o \
+  expect.o mkdir.o socket.o targext.o terminals.o $(EXTRA_LIBGNAT_OBJS)
 
 # NOTE ??? - when the -I option for compiling Ada code is made to work,
 #  the library installation will change and there will be a
@@ -2887,6 +2887,8 @@ errno.o   : errno.c
 exit.o    : adaint.h exit.c
 expect.o  : expect.c
 final.o   : final.c
+rtfinal.o : rtfinal.c
+rtinit.o  : rtinit.c
 locales.o : locales.c
 mkdir.o   : mkdir.c
 socket.o  : socket.c gsocket.h
diff --git a/gcc/ada/mingw32.h b/gcc/ada/mingw32.h
index 67bfd2cccfe..ce0d95ae590 100644
--- a/gcc/ada/mingw32.h
+++ b/gcc/ada/mingw32.h
@@ -62,6 +62,7 @@
 #ifdef GNAT_UNICODE_SUPPORT
 
 extern UINT CurrentCodePage;
+extern UINT CurrentCCSEncoding;
 
 /*  Macros to convert to/from the code page specified in CurrentCodePage.  */
 #define S2WSC(wstr,str,len) \
-- 
