# Maintainer:  Tim Stahlhut <stahta01@gmail.com>
# Contributor: Alexey Pavlov
# Contributor: Ray Donnelly

_build_using_std_mingw_packages=no

if [[ "$_build_using_std_mingw_packages" == "no" && \
       "$MSYSTEM" == "UCRT64" ]]; then
  _build_using_std_mingw_packages=yes
fi

OPT_MINGW_PREFIX=/opt${MINGW_PREFIX}
if [[ "$MSYSTEM" == "UCRT64" ]]; then
  OPT_MINGW_PACKAGE_PREFIX=opt-ucrt-${MSYSTEM_CARCH}
else
  OPT_MINGW_PACKAGE_PREFIX=opt-mingw-${MSYSTEM_CARCH}
fi

_realname=binutils
_sourcedir=${_realname}-git
_base_ver=2.27
pkgbase=opt-mingw-${_realname}${_base_ver}
pkgname=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-git")
pkgver=2.27+r88001.c1.gb5d3ac25628b
pkgrel=2
provides=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}=${pkgver}")
conflicts=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}")
pkgdesc="A set of programs to assemble and manipulate binary and object files"
arch=('any')
url="https://www.gnu.org/software/binutils/"
license=('GPL')
groups=("${OPT_MINGW_PACKAGE_PREFIX}-toolchain")
depends=("${OPT_MINGW_PACKAGE_PREFIX}-libiconv"
         "${OPT_MINGW_PACKAGE_PREFIX}-zlib"
         "${OPT_MINGW_PACKAGE_PREFIX}-gettext-runtime")
if [[ "$_build_using_std_mingw_packages" == "yes" ]]; then
  depends+=("${MINGW_PACKAGE_PREFIX}-libiconv")
  depends+=("${MINGW_PACKAGE_PREFIX}-gettext")
fi
#checkdepends=('dejagnu' 'bc')
makedepends=( 'bison' 'flex' 'texinfo'
  $([[ "$_build_using_std_mingw_packages" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-gcc")
  $([[ "$_build_using_std_mingw_packages" != "yes" ]] && echo "${OPT_MINGW_PACKAGE_PREFIX}-cc")
  "${OPT_MINGW_PACKAGE_PREFIX}-autotools"
  "git"
)
options=('staticlibs' '!distcc' '!ccache' 'debug' '!strip')
#install=binutils.install
source=("${_sourcedir}"::"git+https://sourceware.org/git/binutils-gdb.git#branch=${_realname}-${_base_ver//./_}-branch"
        0001-enable-gold-on.mingw32.patch
        0002-check-for-unusual-file-harder.patch
        0008-fix-libiberty-makefile.mingw.patch
        0009-fix-libiberty-configure.mingw.patch
        0018-binutils-PC64-PCRQUAD-relocation-fix.mingw32.patch
        0110-binutils-mingw-gnu-print.patch
        0200-prevent-problems-with-section-alignment.patch)
sha256sums=('SKIP'
            '93296b909e1a4f9d8a4bbe2437aafa17ca565ef6642a9812b0360c05be228c9d'
            '7f885fd0ceeca6e70f31eb93f6f8a854046737af9aa4695f5e12b7dee8c16f4f'
            '35a3f7ac2ee4b655da6c3cee116a8d5edff48f312a38eadf336793bdc86249ee'
            '4849fe969fc7abb6b6dfcef4d4c6506f23831d86ba22c6dbf8d3039212654837'
            'fbf1b5cede85471340a2c222b07d04c126ab3f76ebf817fb43724853faf19a08'
            '0f145655d4f2aae3383e0c0269d0c47b8a7176144bf0595425fc38b7ebf53153'
            '8e7eccaf77bf99a67c436891b43f9f54d3ab5254daff9275a89faa9e61e2a6d9')
# =========================================== #
# Helper macros to help make tasks easier     #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    if patch --dry-run -Rbp1 -i "${srcdir}/${_patch}" > /dev/null 2>&1 ; then
      msg2 "Skipping ${_patch} because it likely was already applied"
    else
      msg2 "Applying ${_patch}"
      patch -Nbp1 -i "${srcdir}/${_patch}"
    fi
  done
}
# =========================================== #
_git_base_commit=

pkgver() {
  cd "$srcdir/$_sourcedir"
  printf "%s+r%s.c%s.g%s" "${_base_ver}" \
    "$(git rev-list --count ${_git_base_commit})" \
    "$(git rev-list --count ${_git_base_commit}..HEAD)" \
    "$(git rev-parse --short=12 ${_git_base_commit})"
}

prepare() {
  cd ${srcdir}/${_sourcedir}

  _git_base_commit=$(git rev-parse HEAD)
  GIT_AM="git am --committer-date-is-author-date"
  apply_patch_with_msg \
    0001-enable-gold-on.mingw32.patch \
    0002-check-for-unusual-file-harder.patch \
    0008-fix-libiberty-makefile.mingw.patch \
    0009-fix-libiberty-configure.mingw.patch \
    0110-binutils-mingw-gnu-print.patch \
    0018-binutils-PC64-PCRQUAD-relocation-fix.mingw32.patch

  ${GIT_AM} "${srcdir}"/0200-prevent-problems-with-section-alignment.patch

  rm -rf gdb readline libdecnumber sim

  #do not install libiberty
  sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in
  # hack! - libiberty configure tests for header files using "$CPP $CPPFLAGS"
  sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" libiberty/configure
}

build() {
  # Set good default FLAGS
  export LDFLAGS="-pipe"
  export CPPFLAGS=""
  export CFLAGS="-pipe"
  export CXXFLAGS="-pipe"

  if [ "${CARCH}" = "x86_64" ]; then
    CXXFLAGS+=" -march=nocona -msahf -mtune=generic"
    CFLAGS+=" -march=nocona -msahf -mtune=generic"
  else
    CXXFLAGS+=" -mtune=generic"
    CFLAGS+=" -mtune=generic"
  fi

  declare -a extra_config

  if [ "${CARCH}" = "x86_64" ]; then
    extra_config+=('--enable-64-bit-bfd')
  #else
    #LDFLAGS+=" -Wl,--large-address-aware"
  fi

  if check_option "debug" "y"; then
    CFLAGS+=" -O0"
  fi

  if [[ "$_build_using_std_mingw_packages" != "yes" ]]; then
    export PATH=${OPT_MINGW_PREFIX}/bin:$PATH
    extra_config+=(--with-libiconv-prefix=${OPT_MINGW_PREFIX})
  else
    extra_config+=(--with-build-sysroot=${MINGW_PREFIX})
    extra_config+=(--with-libiconv-prefix=${MINGW_PREFIX})
  fi
  echo "PATH := $PATH"

  # Try Using during GCC version change in building of Binutils or CRT.
  # export LDFLAGS+=" -static-libgcc -static-libstdc++"

  cd $srcdir
  rm -rf build-${MSYSTEM}
  mkdir -p build-${MSYSTEM} && cd build-${MSYSTEM}

  #CFLAGS+=" -I${OPT_MINGW_PREFIX}/include"
  ../${_sourcedir}/configure \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --prefix=${OPT_MINGW_PREFIX} \
    --disable-werror \
    --enable-lto \
    --with-sysroot=${OPT_MINGW_PREFIX} \
    "${extra_config[@]}" \
    --disable-nls \
    --disable-rpath \
    --disable-multilib \
    --enable-install-libiberty \
    --enable-plugins \
    --enable-gold \
    --disable-shared

  make
}

#check() {
  #cd ${srcdir}/build-${MSYSTEM}

  ## unset LDFLAGS as testsuite makes assumptions about which ones are active
  ## do not abort on errors - manually check log files
  #make LDFLAGS="" -k check || true
#}

package() {
  cd ${srcdir}/build-${MSYSTEM}

  if [[ "$_build_using_std_mingw_packages" != "yes" ]]; then
    export PATH=${OPT_MINGW_PREFIX}/bin:$PATH
  fi

  make DESTDIR=${pkgdir} install

  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/{lib,include}/${_realname}
  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/${MINGW_CHOST}/include
  cp ${pkgdir}${OPT_MINGW_PREFIX}/include/ansidecl.h ${pkgdir}${OPT_MINGW_PREFIX}/${MINGW_CHOST}/include/
  mv ${pkgdir}${OPT_MINGW_PREFIX}/include/*.h ${pkgdir}${OPT_MINGW_PREFIX}/include/${_realname}
  mv ${pkgdir}${OPT_MINGW_PREFIX}/lib/*.a ${pkgdir}${OPT_MINGW_PREFIX}/lib/${_realname}

  # Remove unwanted files
  find ${pkgdir}${OPT_MINGW_PREFIX}/share/locale -type f -iname "bfd.*" -o -iname "opcodes.*" | xargs -rtl1 rm
  # rm -rf ${pkgdir}${OPT_MINGW_PREFIX}/share
  rm -f ${pkgdir}${OPT_MINGW_PREFIX}/share/info/dir

  # Add some useful headers
  #install -m644 ${srcdir}/${_realname}-${pkgver}/include/libiberty.h ${pkgdir}${OPT_MINGW_PREFIX}/include
  #install -m644 ${srcdir}/${_realname}-${pkgver}/include/demangle.h ${pkgdir}${OPT_MINGW_PREFIX}/include

  find  ${pkgdir}${OPT_MINGW_PREFIX}/share -type f -iname "opcodes.mo" -o -iname "bfd.mo" | xargs -rtl1 rm
}
