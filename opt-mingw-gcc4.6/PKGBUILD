# Maintainer:  Tim Stahlhut <stahta01@gmail.com>
# Contributor: Alexey Pavlov
# Contributor: Alexey Borzenkov
# Contributor: Ray Donnelly
# Contributor: Renato Silva
# Contributor: wirx6
# Contributor: Kirill MÃ¼ller
# Contributor: Liu Hao

# =========================================== #
# Common toolchain settings
OPT_MINGW_PREFIX=/opt${MINGW_PREFIX}
if [[ "$MSYSTEM" == "UCRT64" ]]; then
  OPT_MINGW_PACKAGE_PREFIX=opt-ucrt-${MSYSTEM_CARCH}
else
  OPT_MINGW_PACKAGE_PREFIX=opt-mingw-${MSYSTEM_CARCH}
fi
_include_sub_folder=/${MINGW_CHOST}
# =========================================== #

_enable_fortran=no       # Use yes for production
_enable_cxx=no           # Use yes for production
_enable_ada=yes           # Use yes for production
_enable_lto=no           # Use yes for production

_enable_threads=yes       # Use yes for production
_enable_libquadmath=no

_enable_graphite=no      # Yes is currently broken
_enable_bootstrap=no     # Use yes for production
_build_static_only_gcc=no # Use no for production

#
# =========================================== #

if [[ "$_enable_fortran" == "yes" && "$_enable_libquadmath" != "yes" ]]; then
   warning "when building FORTRAN; libquadmath is enabled"
  _enable_libquadmath=yes
fi

if [[ "$_enable_bootstrap" != "yes" && "$MSYSTEM" == "UCRT64" ]]; then
  # UCRT64 requires bootstrap to build
  _enable_bootstrap=yes
fi

####
#
_realname=gcc
_sourcedir=${_realname}-git
_base_ver=4.6
pkgbase=opt-mingw-${_realname}${_base_ver}
pkgname=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-git"
         "${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-libs-git"
         $([[ "$_enable_fortran" == "yes" ]] && echo "${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-libgfortran-git")
         $([[ "$_enable_fortran" == "yes" ]] && echo "${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-fortran-git")
         $([[ "$_enable_ada" == "yes" ]] && echo "${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-ada-git")
        )
pkgver=4.6.4+d20130412.r45.c5.g66cc0b3cf5bc
pkgrel=2
pkgdesc="GCC for the MinGW-w64"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64')
#options=('staticlibs' '!emptydirs') # '!strip' 'debug') # production options
options=('staticlibs' '!emptydirs' '!strip' '!debug') # development options
url="https://gcc.gnu.org"
license=('GPL' 'LGPL' 'FDL' 'custom')
groups=("${OPT_MINGW_PACKAGE_PREFIX}-toolchain")
makedepends=(
  "${OPT_MINGW_PACKAGE_PREFIX}-${_realname}"
  $([[ "$_enable_ada" == "yes" ]] && echo "${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-ada")
  "${OPT_MINGW_PACKAGE_PREFIX}-crt"
  "${OPT_MINGW_PACKAGE_PREFIX}-headers"
  "${OPT_MINGW_PACKAGE_PREFIX}-libiconv"
  "${OPT_MINGW_PACKAGE_PREFIX}-zlib"
  "${OPT_MINGW_PACKAGE_PREFIX}-windows-default-manifest"
)
#checkdepends=('dejagnu')
optdepends=()

PPL_VERSION=0.11       # Parma Polyhedra Library
CLOOG_VERSION=0.15.11  # version 0.15 recommended for gcc 4.6.x
MPFR_VERSION=2.4.2     # min 2.4.2
GMP_VERSION=4.3.2      # min 4.3.2
MPC_VERSION=0.8.1      # min 0.8.1
noextract=("mpfr-${MPFR_VERSION}.tar.bz2"
           "cloog-ppl-${CLOOG_VERSION}.tar.gz" "ppl-${PPL_VERSION}.tar.gz"
           "gmp-${GMP_VERSION}.tar.bz2" "mpc-${MPC_VERSION}.tar.gz")
source=(ftp://gcc.gnu.org/pub/gcc/infrastructure/ppl-${PPL_VERSION}.tar.gz
        ftp://gcc.gnu.org/pub/gcc/infrastructure/cloog-ppl-${CLOOG_VERSION}.tar.gz
        ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-${MPFR_VERSION}.tar.bz2
        ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-${GMP_VERSION}.tar.bz2
        ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-${MPC_VERSION}.tar.gz
        'conftest.adb'
        '111-gcc-4.0-fix-for-windows-not-minding-non-existant-parent-dirs.patch'
        '122-gcc-4.9-Relocate-libintl.patch'
        '131-gcc-4.0-windows-lrealpath-no-force-lowercase-nor-backslash.patch'
        '132-gcc-4.3-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch'
        '704-gcc-4.6.4-Fix-texi-docs-syntax-errors.patch'
        ${_sourcedir}::"git+https://github.com/gcc-mirror/gcc.git#branch=releases/gcc-${_base_ver}")
sha256sums=('3453064ac192e095598576c5b59ecd81a26b268c597c53df05f18921a4f21c77'
            '7cd634d0b2b401b04096b545915ac67f883556e9a524e8e803a6bf6217a84d5f'
            'c7e75a08a8d49d2082e4caee1591a05d11b9d5627514e678f02d66a124bcf2ba'
            '936162c0312886c21581002b79932829aa048cfaf9937c6265aeaa14f1cd1775'
            'e664603757251fd8a352848276497a4c79b7f8b21fd8aedd5cc0598a38fee3e4'
            '7270a08586d76b73d251d530f740a29a8bcc1ae11bf28a0fa35e811c9f39f2c1'
            'cba7c512a4e0e6a738e0f4ad1026930260a73c7b39bedf36df0b16bae312206b'
            'd143713dfcb86afa0c32e53b12c1d3a9586729b6580c8e535d72e03003511914'
            '7cd7f884b7d2f64846adfb06007e881834fd00e98f78c737b965a823ce6198b0'
            'd122ee00238f2cef746639cc5d8807dffd7d4f06a33e1bb146fa1b28a7dae14a'
            'c5782bca021e1b96ada60001e98052648bc07207d0a6e5066bc0b69f1efb692e'
            'SKIP')
# =========================================== #
# Helper macros to help make tasks easier     #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    if patch --dry-run -Rbp1 -i "${srcdir}/${_patch}" > /dev/null 2>&1 ; then
      msg2 "Skipping ${_patch} because it likely was already applied"
    else
      msg2 "Applying ${_patch}"
      patch -Nbp1 -i "${srcdir}/${_patch}"
    fi
  done
}
del_file_exists() {
  for _fname in "$@"
  do
    if [ -f ${_fname} ]; then
      rm -rf ${_fname}
    fi
  done
}
_extract_to_gcc_folder() {
    local tarfile="$1"
    local subfolder="$(echo "$tarfile" | sed 's/-.*$//')"
    if [ ! -d  "$_sourcedir/$subfolder" ]; then
        echo "Extracting ${tarfile} to $_sourcedir/$subfolder"
        mkdir -p "$_sourcedir/$subfolder"
        tar -x --strip-components=1 -f "$tarfile" -C "$_sourcedir/$subfolder"
    else
        echo "Folder $_sourcedir/$subfolder already exists"
    fi
}
# =========================================== #
_git_base_commit=
_gcc_version=
_gcc_date=

pkgver() {
  cd ${srcdir}/${_sourcedir}
  _gcc_version=$(head -n 34 gcc/BASE-VER | sed -e 's/.* //' | tr -d '"\n')
  _gcc_date=$(head -n 34 gcc/DATESTAMP | sed -e 's/.* //' | tr -d '"\n')
  printf "%s+d%s.r%s.c%s.g%s" "$_gcc_version" "$_gcc_date" \
    $(git rev-list --count $(git log -1 --format=%H -- gcc/DATESTAMP)..${_git_base_commit}) \
    $(git rev-list --count ${_git_base_commit}..HEAD) \
    $(git rev-parse --short=12 ${_git_base_commit})
}

prepare() {
  cd ${srcdir}/${_sourcedir}

  _gcc_version=$(head -n 34 gcc/BASE-VER | sed -e 's/.* //' | tr -d '"\n')
  _gcc_major_version=${_gcc_version%%.*}

  cd ${srcdir}

  _extract_to_gcc_folder            mpfr-${MPFR_VERSION}.tar.bz2
  _extract_to_gcc_folder            gmp-${GMP_VERSION}.tar.bz2
  _extract_to_gcc_folder            mpc-${MPC_VERSION}.tar.gz

  if [[ "$_enable_graphite" == "yes"  ]]; then
    _extract_to_gcc_folder          cloog-ppl-${CLOOG_VERSION}.tar.gz
    _extract_to_gcc_folder          ppl-${PPL_VERSION}.tar.gz
  else
    rm -fr ${srcdir}/${_sourcedir}/cloog
    rm -fr ${srcdir}/${_sourcedir}/ppl
  fi

  cd ${srcdir}/${_sourcedir}

  del_file_exists intl/canonicalize.c intl/canonicalize.h \
    intl/relocatex.c intl/relocatex.h

  _git_base_commit=$(git rev-parse HEAD)
  GIT_AM="git am --committer-date-is-author-date"

  git am --abort || true

  ${GIT_AM} ${srcdir}/111-gcc-4.0-fix-for-windows-not-minding-non-existant-parent-dirs.patch
  ${GIT_AM} ${srcdir}/122-gcc-4.9-Relocate-libintl.patch
  ${GIT_AM} ${srcdir}/131-gcc-4.0-windows-lrealpath-no-force-lowercase-nor-backslash.patch
  ${GIT_AM} ${srcdir}/132-gcc-4.3-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch
  ${GIT_AM} ${srcdir}/704-gcc-4.6.4-Fix-texi-docs-syntax-errors.patch

  sed -i 's|${prefix}/mingw/|${prefix}/|g' configure

  # change hard coded /mingw prefix to the absolute forward slash prefix
  local MINGW_NATIVE_PREFIX=$(cygpath -am ${OPT_MINGW_PREFIX}${_include_sub_folder})
  sed -i "s|/mingw/|${MINGW_NATIVE_PREFIX}/|g" gcc/config/i386/mingw32.h
  # Replace "/mingw/" with the unix like path used
  sed -i "s|/mingw/|${OPT_MINGW_PREFIX}${_include_sub_folder}/|g" gcc/config/i386/t-mingw-w32
  sed -i "s|/mingw/|${OPT_MINGW_PREFIX}${_include_sub_folder}/|g" gcc/config/i386/t-mingw-w64
  sed -i "s|/mingw/|${OPT_MINGW_PREFIX}${_include_sub_folder}/|g" gcc/config/i386/t-mingw32
}

build() {
  cd ${srcdir}/${_sourcedir}
  _gcc_version=$(head -n 34 gcc/BASE-VER | sed -e 's/.* //' | tr -d '"\n')
  echo "_gcc_version := $_gcc_version"
  _gcc_major_version=${_gcc_version%%.*}
  echo "_gcc_major_version := $_gcc_major_version"

  export LDFLAGS="-pipe"
  export CPPFLAGS="-D__USE_MINGW_ANSI_STDIO=0"
  export CFLAGS="-pipe -march=pentium4"

  export PATH=${OPT_MINGW_PREFIX}/bin:$PATH
  echo "PATH := $PATH"
  ${CC} --version
  pacman -Qs "${OPT_MINGW_PACKAGE_PREFIX}-toolchain" | grep ${OPT_MINGW_PACKAGE_PREFIX} \
    | sed "s|(${OPT_MINGW_PACKAGE_PREFIX}-toolchain)||" || true

  [[ -d ${srcdir}/build-${MSYSTEM} ]] && rm -rf ${srcdir}/build-${MSYSTEM}
  mkdir -p ${srcdir}/build-${MSYSTEM} && cd ${srcdir}/build-${MSYSTEM}

  declare -a extra_config
  #if check_option "debug" "n"; then
    extra_config+=("--disable-libstdcxx-debug")
  #else
    #extra_config+=("--enable-libstdcxx-debug")
  #fi

  case "${CARCH}" in
    i686)
      extra_config+=("--with-dwarf2")
      extra_config+=("--disable-sjlj-exceptions")

      local _arch=i686
    ;;

    x86_64)
      local _arch=x86-64
    ;;
  esac

  if [[ "$_enable_bootstrap" == "yes" ]]; then
    extra_config+=("--enable-bootstrap")
  elif [[ "$_enable_bootstrap" == "no" ]]; then
    extra_config+=("--disable-bootstrap")
  fi

  local _LDFLAGS_FOR_TARGET="$LDFLAGS"

  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105507#c3
  # At least with mingw32 + dwarf-2 exceptions there can only be one libgcc in
  # process, or exceptions will no longer work. Since some of the gcc deps are
  # linked dynamically like gmp/zlib/zstd and those pull in libgcc we can't
  # allow libgcc to be linked statically. The default is "-static-libstdc++
  # -static-libgcc" for both, so we drop "-static-libgcc" here:
  extra_config+=('--with-boot-ldflags="-static-libstdc++"')
  extra_config+=('--with-stage1-ldflags="-static-libstdc++"')

  local _languages="c"
  if [ "$_enable_lto" == "yes" ]; then
    _languages+=",lto"
    extra_config+=("--enable-lto")
  else
    extra_config+=("--disable-lto")
  fi
  if [ "$_enable_cxx" == "yes" ]; then
    _languages+=",c++"
  fi
  if [ "$_enable_fortran" == "yes" ]; then
    _languages+=",fortran"
  fi
  if [ "$_enable_ada" == "yes" ]; then
    _languages+=",ada"
  fi

  if [[ "$_enable_ada" != "yes" ]]; then
    extra_config+=('--disable-libada')
  fi

  if [[ "$_enable_libquadmath" != "yes" ]]; then
    extra_config+=('--disable-libquadmath')
  fi

  if [[ "$_enable_cxx" != "yes" ]]; then
    extra_config+=('--disable-libstdcxx')
  else
    extra_config+=('--enable-libstdcxx-time')
  fi

  if [[ "$_enable_threads" != "yes" ]]; then
    extra_config+=('--disable-threads')
  else
    extra_config+=("--enable-threads")
  fi

  extra_config+=('--disable-libatomic')

  extra_config+=("--disable-libgomp")

  extra_config+=("--with-libiconv-prefix=${OPT_MINGW_PREFIX}")

  if [[ "$_enable_graphite" == "yes"  ]]; then
    extra_config+=('--enable-graphite') # requires CLOOG
    #extra_config+=("--with-gmp-build=${srcdir}/${_sourcedir}/gmp") # causes error in intree mpfr
    #configure: error: Do not use --with-gmp-build and other --with-gmp options simultaneously.
    extra_config+=("--with-gmp-include=${srcdir}/${_sourcedir}/gmp")
    extra_config+=("--with-gmp-lib=${srcdir}/${_sourcedir}/gmp")
    # --enable-cloog-backend=ppl
  else
    extra_config+=('--disable-graphite')
  fi

  extra_config+=("--build=${MINGW_CHOST}")
  extra_config+=("--with-system-zlib")

  if [[ "$_build_static_only_gcc" != "yes" ]]; then
    extra_config+=("--enable-shared")
  else
    extra_config+=("--disable-shared")
  fi

  echo ""
  echo "OPT_MINGW_PREFIX := ${OPT_MINGW_PREFIX}"
  echo ""
  echo "OPT_MINGW_PACKAGE_PREFIX := ${OPT_MINGW_PACKAGE_PREFIX}"
  echo ""
  echo "LDFLAGS := ${LDFLAGS}"
  echo ""
  echo "CC := ${CC}"
  echo ""
  echo "CPPFLAGS := ${CPPFLAGS}"
  echo ""
  echo "ADA_INCLUDE_PATH := ${ADA_INCLUDE_PATH}"
  echo ""
  echo "ADA_OBJECT_PATH := ${ADA_OBJECT_PATH}"
  echo ""
  echo "extra_config contains ${extra_config[@]}"
  echo ""

  if [[ "$_enable_ada" == "yes" ]]; then
    # configure fails to give clear reason for failure
    ${CC} -c ${srcdir}/conftest.adb
  fi

  ../${_sourcedir}/configure \
    --prefix=${OPT_MINGW_PREFIX} \
    --with-local-prefix=${OPT_MINGW_PREFIX}/local \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --with-native-system-header-dir=${OPT_MINGW_PREFIX}${_include_sub_folder}/include \
    --libexecdir=${OPT_MINGW_PREFIX}/lib \
    --enable-checking=release \
    --with-arch=${_arch} \
    --with-tune=generic \
    --enable-languages=${_languages} \
    --enable-static \
    --enable-fully-dynamic-string \
    --disable-libstdcxx-pch \
    --disable-multilib \
    --disable-rpath \
    --disable-win32-registry \
    --disable-nls \
    --disable-werror \
    --disable-symvers \
    --with-pkgversion="Rev ${pkgver##*.g}-${pkgrel}, Built by stahta01" \
    --with-bugurl="https://github.com/stahta01/mingw64_gcc_msys2_packages/issues" \
    --with-gnu-as --with-gnu-ld \
    "${extra_config[@]}"

  make all V=1 --jobs=1

  rm -rf ${srcdir}${OPT_MINGW_PREFIX}

  make --jobs=1 DESTDIR=${srcdir} install
  if [[ "$_enable_ada" == "yes" && "$_build_static_only_gcc" != "yes" ]]; then
    mv ${srcdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/adalib/*.dll ${srcdir}${OPT_MINGW_PREFIX}/bin/
  fi
}

package_gcc-libs-git() {
  pkgdesc="GNU Compiler Collection (libraries) for MinGW-w64"
  depends=()
  conflicts=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-libs")
  provides=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-libs")
  if [[ "$_build_static_only_gcc" != "yes" ]]; then
    provides+=("${OPT_MINGW_PACKAGE_PREFIX}-libssp")
  fi

  # Licensing information

  # Part of the package is GCCRLE, part is LGPL2+, see README generation below.
  # Since the packaged GCCRLE libraries are also GPL3+, and LGPL2+ is compatible
  # with GPL3+, the whole package can be redistributed under GPL3+.
  license=(GPL3+ partial:'GCCRLE' partial:'LGPL2+')

  # We explain the licensing in this generated README file
  mkdir -p "${pkgdir}${OPT_MINGW_PREFIX}/share/licenses/${_realname}-libs"
  cat << ENDFILE > "${pkgdir}${OPT_MINGW_PREFIX}/share/licenses/${_realname}-libs/README"
The libgcc, libssp, libstdc++, libgomp and libatomic libraries are covered by
GPL3+ with the GCC Runtime Library Exception. The libquadmath library is covered
by LGPL2+. The package as a whole can be redistributed under GPL3+.
ENDFILE

  # License files
  install -Dm644 "${srcdir}/${_sourcedir}/COPYING3"        "${pkgdir}${OPT_MINGW_PREFIX}/share/licenses/${_realname}-libs/COPYING3"
  install -Dm644 "${srcdir}/${_sourcedir}/COPYING.LIB"     "${pkgdir}${OPT_MINGW_PREFIX}/share/licenses/${_realname}-libs/COPYING.LIB"
  install -Dm644 "${srcdir}/${_sourcedir}/COPYING.RUNTIME" "${pkgdir}${OPT_MINGW_PREFIX}/share/licenses/${_realname}-libs/COPYING.RUNTIME"

  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/bin

  cd ${srcdir}${OPT_MINGW_PREFIX}
  # libitm* and libvtv* are disbled until fixed
  if [[ "$_build_static_only_gcc" != "yes" ]]; then
    cp bin/{libgcc*,libssp*}.dll ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  fi
  if [[ "$_enable_libquadmath" == "yes" && "$_build_static_only_gcc" != "yes" ]]; then
    cp bin/libquadmath*.dll ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  fi
  if [[ "$_enable_cxx" == "yes" && "$_build_static_only_gcc" != "yes" ]]; then
    cp bin/libstdc*.dll ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  fi
  #cp bin/libgomp*.dll ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  #cp bin/libatomic*.dll ${pkgdir}${OPT_MINGW_PREFIX}/bin/
}

package_gcc-git() {
  pkgdesc="GNU Compiler Collection (C,C++,OpenMP) for MinGW-w64"
  depends=("${OPT_MINGW_PACKAGE_PREFIX}-crt"
           "${OPT_MINGW_PACKAGE_PREFIX}-headers"
           "${OPT_MINGW_PACKAGE_PREFIX}-zlib"
           "${OPT_MINGW_PACKAGE_PREFIX}-windows-default-manifest")
  if [[ "$_build_static_only_gcc" != "yes" ]]; then
    depends+=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-libs-git=${pkgver}-${pkgrel}")
  fi
  depends+=("${OPT_MINGW_PACKAGE_PREFIX}-binutils")
  depends+=("${OPT_MINGW_PACKAGE_PREFIX}-libiconv")
  provides=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}"
            "${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-base"
            "${OPT_MINGW_PACKAGE_PREFIX}-cc")
  conflicts=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}"
             "${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-base")

  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/{bin,include,lib,share}

  cd ${srcdir}${OPT_MINGW_PREFIX}
  cp bin/cpp.exe                                        ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  cp bin/gcc.exe                                        ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  cp bin/gcc.exe                                        ${pkgdir}${OPT_MINGW_PREFIX}/bin/cc.exe
  #cp bin/gcc-ar.exe                                     ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  #cp bin/gcc-nm.exe                                     ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  #cp bin/gcc-ranlib.exe                                 ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  cp bin/gcov.exe                                       ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  if [[ $_gcc_major_version -gt 4 ]]; then
    cp bin/gcov-tool.exe                                ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  fi
  if [[ "$_enable_cxx" == "yes" ]]; then
    cp bin/c++.exe                                      ${pkgdir}${OPT_MINGW_PREFIX}/bin/
    cp bin/g++.exe                                      ${pkgdir}${OPT_MINGW_PREFIX}/bin/
    cp bin/${MINGW_CHOST}-c++.exe                       ${pkgdir}${OPT_MINGW_PREFIX}/bin/
    cp bin/${MINGW_CHOST}-g++.exe                       ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  fi
  cp bin/${MINGW_CHOST}-gcc-${pkgver%%+*}.exe           ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gcc.exe                         ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  #cp bin/${MINGW_CHOST}-gcc-ar.exe                      ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  #cp bin/${MINGW_CHOST}-gcc-nm.exe                      ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  #cp bin/${MINGW_CHOST}-gcc-ranlib.exe                  ${pkgdir}${OPT_MINGW_PREFIX}/bin/

  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include
  if [[ "$_enable_cxx" == "yes" ]]; then
    cp -r include/c++                                         ${pkgdir}${OPT_MINGW_PREFIX}/include/
  fi
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/*.h         ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/ssp      ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/include-fixed    ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/install-tools    ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/cc1.exe             ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/collect2.exe        ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/crt*.o              ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  if [ "$_enable_lto" == "yes" ]; then
    cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/liblto*           ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  fi
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libgcov*            ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/lto*.exe            ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  if [[ "$_enable_cxx" == "yes" ]]; then
    cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/cc1plus.exe       ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  fi

  #cp lib/libatomic*                                           ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  if [[ "$_build_static_only_gcc" != "yes" ]]; then
    cp lib/libgcc*                                            ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  fi
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libgcc*             ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/

  #cp lib/libgomp*                                             ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  #cp lib/libitm*                                              ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  if [[ "$_enable_libquadmath" == "yes" ]]; then
    cp lib/libquadmath*                                       ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  fi
  cp lib/libssp*                                              ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  #cp lib/libvtv*                                              ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  if [[ "$_enable_cxx" == "yes" ]]; then
    cp lib/libstdc++*                                         ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
    cp lib/libsupc++*                                         ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  fi

  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/share/{doc,info,locale,man}
  #cp -r share/doc/gcc-${pkgver%%+*} ${pkgdir}${OPT_MINGW_PREFIX}/share/doc/
  cp share/info/cpp.info*                                ${pkgdir}${OPT_MINGW_PREFIX}/share/info/
  cp share/info/cppinternals.info*                       ${pkgdir}${OPT_MINGW_PREFIX}/share/info/
  cp share/info/gcc.info*                                ${pkgdir}${OPT_MINGW_PREFIX}/share/info/
  cp share/info/gccinstall.info*                         ${pkgdir}${OPT_MINGW_PREFIX}/share/info/
  cp share/info/gccint.info*                             ${pkgdir}${OPT_MINGW_PREFIX}/share/info/
  #cp share/info/libitm.info*                             ${pkgdir}${OPT_MINGW_PREFIX}/share/info/
  #cp share/info/libgomp.info*                            ${pkgdir}${OPT_MINGW_PREFIX}/share/info/
  if [[ "$_enable_libquadmath" == "yes" ]]; then
    cp share/info/libquadmath.info*                      ${pkgdir}${OPT_MINGW_PREFIX}/share/info/
  fi

  #cp share/locale/* ${pkgdir}${OPT_MINGW_PREFIX}/share/locale/
  if [[ "$_enable_cxx" == "yes" ]]; then
    mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/share/gcc-${pkgver%%+*}/python
    cp -r share/gcc-${pkgver%%+*}/python/libstdcxx       ${pkgdir}${OPT_MINGW_PREFIX}/share/gcc-${pkgver%%+*}/python/
  fi
  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/share/man/man1
  cp share/man/man1/cpp.1*                               ${pkgdir}${OPT_MINGW_PREFIX}/share/man/man1/
  cp share/man/man1/gcc.1*                               ${pkgdir}${OPT_MINGW_PREFIX}/share/man/man1/
  cp share/man/man1/gcov.1*                              ${pkgdir}${OPT_MINGW_PREFIX}/share/man/man1/
  cp share/man/man7/fsf-funding.7*                       ${pkgdir}${OPT_MINGW_PREFIX}/share/man/man1/
  cp share/man/man7/gfdl.7*                              ${pkgdir}${OPT_MINGW_PREFIX}/share/man/man1/
  cp share/man/man7/gpl.7*                               ${pkgdir}${OPT_MINGW_PREFIX}/share/man/man1/
  if [[ "$_enable_cxx" == "yes" ]]; then
    cp share/man/man1/g++.1*                             ${pkgdir}${OPT_MINGW_PREFIX}/share/man/man1/
  fi
}

package_gcc-libgfortran-git() {
  pkgdesc="GNU Compiler Collection (libgfortran) for MinGW-w64"
  if [[ "$_build_static_only_gcc" != "yes" ]]; then
    depends=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-libs-git=${pkgver}-${pkgrel}")
  fi
  provides=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-libgfortran")
  conflicts=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-libgfortran")

  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/bin
  cd ${srcdir}${OPT_MINGW_PREFIX}
  cp bin/libgfortran*.dll                                ${pkgdir}${OPT_MINGW_PREFIX}/bin/
}

package_gcc-fortran-git() {
  pkgdesc="GNU Compiler Collection (Fortran) for MinGW-w64"
  depends=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-git=${pkgver}-${pkgrel}"
           "${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-libgfortran-git=${pkgver}-${pkgrel}")
  provides=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-fortran")
  conflicts=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-fortran")

  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/{bin,lib,share}

  cd ${srcdir}${OPT_MINGW_PREFIX}
  cp bin/gfortran.exe ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  cp bin/${MINGW_CHOST}-gfortran.exe ${pkgdir}${OPT_MINGW_PREFIX}/bin/

  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}
  cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/finclude        ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/f951.exe           ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  #cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/libcaf_single.a    ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  cp lib/libgfortran*                                        ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/share/man/man1
  cp share/man/man1/gfortran.1*                         ${pkgdir}${OPT_MINGW_PREFIX}/share/man/man1/
  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/share/info
  cp share/info/gfortran.info*                          ${pkgdir}${OPT_MINGW_PREFIX}/share/info/
}

package_gcc-ada-git() {
  pkgdesc="GNU Compiler Collection (Ada) for MinGW-w64"
  depends=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-git=${pkgver}-${pkgrel}")
  provides=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-ada")
  conflicts=("${OPT_MINGW_PACKAGE_PREFIX}-${_realname}-ada")

  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/{bin,lib,share}

  cd ${srcdir}${OPT_MINGW_PREFIX}

  cp bin/gnat*.exe                                          ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  if [[ "$_enable_ada" == "yes" && "$_build_static_only_gcc" != "yes" ]]; then
    cp bin/{libgnarl*,libgnat*}.dll                           ${pkgdir}${OPT_MINGW_PREFIX}/bin/
  fi

  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}
  cp lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/gnat1.exe         ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/

  if [ "$_enable_ada" == "yes" ]; then
    cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/adainclude     ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  fi

  if [ "$_enable_ada" == "yes" ]; then
    cp -r lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/adalib         ${pkgdir}${OPT_MINGW_PREFIX}/lib/gcc/${MINGW_CHOST}/${pkgver%%+*}/
  fi

  mkdir -p ${pkgdir}${OPT_MINGW_PREFIX}/share/info
  cp share/info/gnat-style.info*                        ${pkgdir}${OPT_MINGW_PREFIX}/share/info/
  cp share/info/gnat_rm.info*                           ${pkgdir}${OPT_MINGW_PREFIX}/share/info/
  cp share/info/gnat_ugn.info*                          ${pkgdir}${OPT_MINGW_PREFIX}/share/info/
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${OPT_MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
